{
	"nodes":[
		{"id":"a56cf71f66f06733","type":"text","text":"```dataviewjs\nawait dv.view(\"../Utils/task-calendar\", {pages: '\"Utils/task-calendar\"', view: \"month\", firstDayOfWeek: \"0\", options: \"style4 noLayer\"})\n```\n","x":-1420,"y":-1300,"width":1220,"height":880},
		{"id":"2fcdbb8681c85717","type":"text","text":"```dataviewjs\nconst tToday = moment().format(\"YYYY-MM-DD\");\nvar tasks = dv.pages('\"Utils/task-calendar/TaskList\"').file.tasks;\ntasks = tasks.where(t => !t.completed && (moment(t.due.valueOf()).isBefore(tToday) || moment(t.due.valueOf()).isSame(tToday)));\n\n// 定义可见部分\nfor (let t of tasks) {\n\tconst tDue = moment(t.due.valueOf());\n\tt.visual = \"\";\n\tif (tDue.isBefore(tToday)) {\n\t\tt.visual += tDue.format(\"YYYY-MM-DD\") + ' ';\n\t\tt.priority = 'Overdue';\n\t\tt.visual += \"<span style='color: #ffcb6b;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'Low') {\n\t\tt.visual += \"<span style='color: #73bbb2;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'Normal') {\n\t\tt.visual += \"<span style='color: #97d8f8;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'High') {\n\t\tt.visual += \"<span style='color: #d04255;'>\" + t.content + \"</span>\";\n\t}\n}\n\nconst order = ['Low', 'Normal', 'High', 'Overdue'];\ntasks = tasks.sort((a, b) => order.indexOf(b.priority) - order.indexOf(a.priority))\n\ndv.header(2, \"Today\")\ndv.taskList(tasks, false);\n```\n\n```dataviewjs\n// 利用正则表达式，将任务文本中的元数据提取并存储成属性\nfunction getMeta(tasks) {\n\t// 遍历目标地址下捕获的所有任务\n    for (i = 0; i < tasks.length; i++) {\n\t\tvar taskText = tasks[i].text;\n\t\t\n\t\t// 通过正则表达式匹配任务文本中的元数据\n\t\tvar textMatch = taskText.match(/\\[content:: (.*?)\\]/);\n\t\tif (textMatch) {\n\t\t\ttasks[i].text = textMatch[1];\n\t\t\ttaskText = taskText.replace(textMatch[0], \"\");\n\t\t}\n\t\t\n\t\tvar priorityMatch = taskText.match(/\\[priority:: (Low|Normal|High)\\]/);\n\t\tif (priorityMatch) {\n\t\t\ttasks[i].priority = priorityMatch[1];\n\t\t\ttaskText = taskText.replace(priorityMatch[0], \"\");\n\t\t}\n\t\t\n\t\tvar dueMatch = taskText.match(/\\[due:: (\\d{4}-\\d{2}-\\d{2})\\]/);\n\t\tif (dueMatch) {\n\t\t\ttasks[i].due = dueMatch[1];\n\t\t\ttaskText = taskText.replace(dueMatch[0], \"\");\n\t\t}\n\t\t\n        var repeatMatch = taskText.match(/\\[repeat:: (None|Daily|Weekly|Monthly)\\]/);\n        if (repeatMatch) {\n\t\t\ttasks[i].repeat = repeatMatch[1];\n            taskText = taskText.replace(repeatMatch[0], \"\");\n        }\n    }\n\treturn tasks;\n}\n\n\n// 生成随机的8位任务ID\nfunction genId() {\n\tconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tlet result = '^';\n\tconst charactersLength = characters.length;\n\tfor (let i = 0; i < 8; i++) {\n\t\tresult += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t}\n\treturn result;\n}\n\n\n// 生成周期性任务\nasync function addRepeatTasks(recurrence) {\n\t// 读取原文件内容\n\tconst file = app.vault.getAbstractFileByPath(\"Utils/task-calendar/TaskList.md\");\n\tvar content = await app.vault.read(file);\n\n\t// 生成新任务\n\tvar newTasks = \"\";\n\tfor (i = 0; i < recurrence.length; i++) {\n\t\tvar repeat = recurrence[i].repeat;\n\t\tvar due = recurrence[i].due;\n\t\t// 生成新日期\n\t\tswitch (repeat) {\n\t\t\tcase \"Daily\":\n\t\t\t\tvar newDue = moment(due).add(1, \"days\").format(\"YYYY-MM-DD\");\n\t\t\t\tbreak;\n\t\t\tcase \"Weekly\":\n\t\t\t\tvar newDue = moment(due).add(1, \"weeks\").format(\"YYYY-MM-DD\");\n\t\t\t\tbreak;\n\t\t\tcase \"Monthly\":\n\t\t\t\tvar newDue = moment(due).add(1, \"months\").format(\"YYYY-MM-DD\");\n\t\t\t\tbreak;\n\t\t}\n\t\tnewTasks += \"- [ ] [id:: \" + genId() + \"] [content:: \" + recurrence[i].text + \"] [due:: \" + newDue + \"] [repeat:: \" + repeat + \"] [priority:: \" + recurrence[i].priority + \"]\\n\";\n\n\t\t// 修改原任务周期性为None\n\t\tconst idEscaped = recurrence[i].id.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n\t\tconst regex = new RegExp(`^.*?\\\\[id:: ${idEscaped}\\\\].*?\\\\n`, 'gm');\n\t\tconst cpl = recurrence[i].completed ? \"x\" : \" \";\n\t\tcontent = content.replace(regex, \"- [\" + cpl + \"] [id:: \" + recurrence[i].id + \"] [content:: \" + recurrence[i].text + \"] [due:: \" + due + \"] [repeat:: None] [priority:: \" + recurrence[i].priority + \"]\\n\");\n\t}\n\t// 修改原文件\n\tapp.vault.modify(file, content + newTasks);\n}\n\n\n// 反复刷新任务列表至列表不再变化\nasync function refreshTasks() {\n\tconst tToday = moment().format(\"YYYY-MM-DD\");\n\twhile (true) {\n\t\tvar tasks = dv.pages('\"Utils/task-calendar\"').file.tasks;\n\t\ttasks = getMeta(tasks);\n\t\tvar recurrence = tasks.filter(t => t.repeat != \"None\" && (t.completed || moment(t.due).isBefore(tToday) || moment(t.due).isSame(tToday)));\n\t\tif (recurrence.length == 0) { return; }\n\t\tawait addRepeatTasks(recurrence);\n\t\tawait new Promise(r => setTimeout(r, 100));\n\t}\n}\nrefreshTasks();\n```\n","x":-180,"y":-1300,"width":400,"height":300},
		{"id":"9b82271780a0c0eb","type":"text","text":"```dataviewjs\nvar tasks = dv.pages('\"Utils/task-calendar/TaskList\"').file.tasks;\ntasks = tasks.where(t => !t.completed && t.due == 'None');\n\n// 定义可见部分\nfor (let t of tasks) {\n\tt.visual = \"\";if (t.priority == 'Low') {\n\t\tt.visual += \"<span style='color: #73bbb2;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'Normal') {\n\t\tt.visual += \"<span style='color: #97d8f8;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'High') {\n\t\tt.visual += \"<span style='color: #d04255;'>\" + t.content + \"</span>\";\n\t}\n}\n\n// 若任务列表非空，则随机抽取任务\nif (tasks.length > 0) {\n    const randomTaskIndex = Math.floor(Math.random() * tasks.length);\n    tasks = [tasks[randomTaskIndex]];\n    dv.taskList(tasks, false);\n} else {\n    dv.paragraph(\"No tasks available.\");\n}\n```\n\n---\n\n\n```dataviewjs\nvar tasks = dv.pages('\"Utils/task-calendar/TaskList\"').file.tasks;\ntasks = tasks.where(t => !t.completed && t.due == 'None');\n\n// 定义可见部分\nfor (let t of tasks) {\n\tt.visual = \"\";if (t.priority == 'Low') {\n\t\tt.visual += \"<span style='color: #73bbb2;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'Normal') {\n\t\tt.visual += \"<span style='color: #97d8f8;'>\" + t.content + \"</span>\";\n\t} else if (t.priority == 'High') {\n\t\tt.visual += \"<span style='color: #d04255;'>\" + t.content + \"</span>\";\n\t}\n}\n\nconst order = ['Low', 'Normal', 'High'];\ntasks = tasks.sort((a, b) => order.indexOf(b.priority) - order.indexOf(a.priority))\n\ndv.taskList(tasks, false);\n```","x":-180,"y":-980,"width":400,"height":560}
	],
	"edges":[]
}